
class TinyGif{
  constructor(w,h,delay=8,repeat=0){ this.w=w; this.h=h; this.delay=delay; this.repeat=repeat; this.frames=[]; }
  addFrame(ctx){ this.frames.push(ctx.getImageData(0,0,this.w,this.h).data); }
  _toIndexed(rgba){
    const n=rgba.length/4, pal=[], map=new Map(), idx=new Uint8Array(n);
    const key=(r,g,b)=> (r<<16)|(g<<8)|b;
    for(let i=0;i<rgba.length;i+=4){
      const r=rgba[i],g=rgba[i+1],b=rgba[i+2];
      let k=key(r,g,b); let id=map.get(k);
      if(id===undefined){ id=pal.length; map.set(k,id); pal.push([r,g,b]); if(pal.length>=256){} }
      idx[i>>2]=id;
    }
    while(pal.length<2) pal.push([0,0,0]);
    return {pal, idx};
  }
  _lzw(data,minSize){
    const CLEAR=1<<minSize, END=CLEAR+1;
    let size=minSize+1, next=END+1;
    const dict=new Map(); for(let i=0;i<CLEAR;i++) dict.set(String.fromCharCode(i),i);
    const out=[CLEAR]; let w=String.fromCharCode(data[0]);
    for(let i=1;i<data.length;i++){
      const c=String.fromCharCode(data[i]); const wc=w+c;
      if(dict.has(wc)) w=wc; else { out.push(dict.get(w)); dict.set(wc,next++); if(next===(1<<size)&&size<12) size++; w=c; }
    }
    out.push(dict.get(w)); out.push(END);
    const bytes=[]; let cur=0,b=0; const push=()=>{ bytes.push(cur&255); cur>>=8; b-=8; };
    for(const code of out){ cur|=(code<<b); b+=size; while(b>=8) push(); }
    if(b>0) push(); const blocks=[]; for(let i=0;i<bytes.length;i+=255) blocks.push(bytes.slice(i,i+255));
    return {minSize:size>minSize?minSize:size-1, blocks};
  }
  render(){
    const w=this.w,h=this.h, out=[]; const U=a=>new Uint8Array(a);
    const first=this.frames[0]; const q=this._toIndexed(first);
    out.push(U([71,73,70,56,57,97])); // GIF89a
    out.push(U([w&255,w>>8,h&255,h>>8,0xF7,0,0])); // gct flag
    const gct=new Uint8Array(256*3); for(let i=0;i<q.pal.length;i++){ gct[i*3]=q.pal[i][0]; gct[i*3+1]=q.pal[i][1]; gct[i*3+2]=q.pal[i][2]; } out.push(gct);
    out.push(U([0x21,0xFF,0x0B,78,69,84,83,67,65,80,69,50,46,48,3,1,this.repeat&255,(this.repeat>>8)&255,0]));
    for(const rgba of this.frames){
      const qi=this._toIndexed(rgba);
      out.push(U([0x21,0xF9,0x04,0x00,this.delay&255,this.delay>>8,0,0]));
      out.push(U([0x2C,0,0,0,0,w&255,w>>8,h&255,h>>8,0]));
      const min=Math.max(2,Math.ceil(Math.log2(Math.max(2,qi.pal.length))));
      const lzw=this._lzw(qi.idx,min); out.push(U([lzw.minSize])); for(const blk of lzw.blocks){ out.push(U([blk.length])); out.push(U(blk)); } out.push(U([0]));
    }
    out.push(U([0x3B])); let total=0; for(const a of out) total+=a.length; const buf=new Uint8Array(total); let off=0; for(const a of out){ buf.set(a,off); off+=a.length; }
    return new Blob([buf],{type:"image/gif"});
  }
}
